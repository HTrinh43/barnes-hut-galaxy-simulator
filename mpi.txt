
#include <iostream>
#include <vector>
#include <cmath>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <chrono>
#include "body.h"
#include "io.h"
#include "node.h"
#include <mpi.h>

const double boundaryXMin = 0.0;
const double boundaryXMax = 4.0;
const double boundaryYMin = 0.0;
const double boundaryYMax = 4.0;



int main(int argc, char *argv[]) {
    // MPI_Init(&argc, &argv);
    // int world_rank, world_size;
    // MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
    // MPI_Comm_size(MPI_COMM_WORLD, &world_size);
    // int num_bodies_per_process = total_num_bodies / world_size;

    int numBodies;
    Body *bodies = NULL;

    char *inputfilename = NULL;
    char *outputfilename = NULL;
    int steps = 10;
    double theta = 0.0;
    int visualization_flag = 0;
    const double G = 0.0001;
    const double rlimit = 0.03;  
    double dt = 0.005;
    int print_flag = 0; // 0 means don't print, 1 means print



    // Parse command line arguments
    for (int i = 1; i < argc; ++i) {
        if (strcmp(argv[i], "-i") == 0) {
            inputfilename = argv[++i];
        } else if (strcmp(argv[i], "-o") == 0) {
            outputfilename = argv[++i];
        } else if (strcmp(argv[i], "-s") == 0) {
            steps = atoi(argv[++i]);
        } else if (strcmp(argv[i], "-t") == 0) {
            theta = atof(argv[++i]);
        } else if (strcmp(argv[i], "-d") == 0) {
            dt = atof(argv[++i]);
        } else if (strcmp(argv[i], "-V") == 0) {
            visualization_flag = 1;
        }else if (strcmp(argv[i], "-p") == 0) {
            print_flag = 1;
        }
    }
    // if (world_rank == 0) {
        readInputFile(inputfilename, &bodies, &numBodies);
        // build tree

    // }
    // Broastcast bodies
    // MPI_Bcast(&numBodies, 1, MPI_INT, 0, MPI_COMM_WORLD);
    // MPI_Bcast(bodies, numBodies, MPI_DOUBLE, 0, MPI_COMM_WORLD);


    // double start;
    // double end;
    // if (world_rank == 0) {
    //     start = MPI_Wtime();
    // }





    // Sequential
    auto start = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < steps; i++) {
        for (int i = 0; i < numBodies; ++i) {
            bodies[i].resetForce();
            if (bodies[i].mass != -1 && 
               (bodies[i].px < boundaryXMin || bodies[i].px > boundaryXMax ||
                bodies[i].py < boundaryYMin || bodies[i].py > boundaryYMax)) {
                bodies[i].mass = -1; // Mark as lost
            }
        }
        Node *root = new Node(2, 2, 4);
        for (int i = 0; i < numBodies; i++) {
           root->insertBody(&bodies[i]);
        }
        for (int j = 0; j < numBodies; j++) {
            if (bodies[j].mass == -1) continue;
            // check if body is within boundary
            if (!root->isWithinBoundary(&bodies[j])) {
                bodies[j].mass = -1;
                continue;
            }
            // bodies[i].resetForce();
            Vec2 vec = root->calculateForceForBody(&bodies[i], theta, G, rlimit);
            bodies[i].fx += vec.x;
            bodies[i].fy += vec.y;
            bodies[i].update(dt);
        }
        delete root;
        root = nullptr;
        if (print_flag == 1) {
            for (int i = 0; i < numBodies; ++i) {
                bodies[i].print();
            }
        }
    }
    auto end = std::chrono::high_resolution_clock::now();

    // Print time
    std::chrono::duration<double> elapsed = end - start;
    std::cout << "Elapsed time for sequential function: " << elapsed.count() << " seconds" << std::endl;

    // if (print_flag == 1) {
    //     for (int i = 0; i < numBodies; ++i) {
    //         bodies[i].print();
    //     }
    // }

    // Write output data
    // if (outputfilename != NULL) {
    //     writeOutputData(outputfilename, bodies, numBodies);
    // }

    // Free memory
    free(bodies);
    // MPI_Finalize();
    return 0;
}

